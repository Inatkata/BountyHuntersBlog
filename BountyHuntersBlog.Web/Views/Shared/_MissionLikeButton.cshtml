@* Usage:
   <partial name="_MissionLikeButton" model="new { Id = Model.Id, Likes = Model.LikesCount, IsLiked = Model.CanLike == false ? false : true }" />
   Model props: Id (int missionId), Likes (int), IsLiked (bool)
*@
@{
    var missionId = (int)(ViewData["Id"] ?? (Model?.Id ?? 0));
    var likes = (int)(ViewData["Likes"] ?? (Model?.Likes ?? 0));
    var isLiked = (bool)(ViewData["IsLiked"] ?? (Model?.IsLiked ?? false));
    var formId = $"like-mission-{missionId}";
}
<form id="@formId" asp-controller="Likes" asp-action="ToggleMission" method="post" class="d-inline">
    <input type="hidden" name="missionId" value="@missionId" />
    <button type="submit" class="btn btn-sm @(isLiked ? "btn-primary" : "btn-outline-primary")">
        👍 <span class="like-count">@likes</span>
    </button>
</form>
<script>
(function(){
  const form = document.getElementById('@formId');
  if (!form) return;
  form.addEventListener('submit', async function (e) {
    if (!window.fetch) return; // fallback: нормален POST
    e.preventDefault();
    const fd = new FormData(form);
    const res = await fetch(form.action, {
      method: 'POST',
      headers: { 'X-Requested-With': 'XMLHttpRequest' },
      body: fd
    });
    if (!res.ok) return;
    try{
      const data = await res.json();
      if (data && typeof data.likesCount !== 'undefined') {
        form.querySelector('.like-count').textContent = data.likesCount;
        form.querySelector('button').className = 'btn btn-sm ' + (data.isLiked ? 'btn-primary' : 'btn-outline-primary');
      }
    }catch(_){}
  });
})();
</script>