@model BountyHuntersBlog.ViewModels.LikeButtonViewModel
@{
    var targetType = (Model.TargetType ?? (Model.Target.ToString().ToLower())); // "mission" | "comment"
    var isAuth = Model.IsAuthenticated;
    var isLiked = Model.IsLiked || Model.IsLikedByCurrentUser;
    var count = Model.LikesCount > 0 ? Model.LikesCount : Model.TotalCount;
    var btnId = $"likebtn-{targetType}-{Model.TargetId}";
}
<form class="d-inline like-form" data-like-form>
    @Html.AntiForgeryToken()
    <button type="button"
            id="@btnId"
            class="btn btn-sm @(isLiked ? "btn-danger" : "btn-outline-danger")"
            data-like-btn
            data-target-type="@targetType"
            data-target-id="@Model.TargetId"
            data-is-liked="@(isLiked.ToString().ToLower())"
            title="Like">
        <i class="fa-regular @(isLiked ? "fa-heart" : "fa-heart")"></i>
        <span class="ms-1" data-like-count>@count</span>
    </button>
</form>

@section Scripts {
    <script>
        (function(){
            function findToken(form){
                const input = form.querySelector('input[name="__RequestVerificationToken"]');
                return input ? input.value : null;
            }

            async function toggleLike(btn){
                const form = btn.closest('[data-like-form]');
                const token = findToken(form);
                const targetType = btn.getAttribute('data-target-type'); // "mission" | "comment"
                const targetId = parseInt(btn.getAttribute('data-target-id'), 10);
                const isLiked = btn.getAttribute('data-is-liked') === 'true';
                const countEl = btn.querySelector('[data-like-count]');

                // Not authenticated? Do nothing.
                if (@(Model.IsAuthenticated.ToString().ToLower()) === false) return;

                try{
                    const res = await fetch('/Likes/Toggle', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ targetType, targetId })
                    });

                    if(!res.ok){ throw new Error('Failed'); }

                    const data = await res.json();
                    // Accept both camelCase and PascalCase from server:
                    const newCount = (data.likesCount ?? data.LikesCount ?? 0);
                    const newIsLiked = (data.isLiked ?? data.IsLiked ?? false);

                    // Update UI
                    btn.setAttribute('data-is-liked', newIsLiked ? 'true' : 'false');
                    btn.classList.toggle('btn-danger', newIsLiked);
                    btn.classList.toggle('btn-outline-danger', !newIsLiked);
                    if (countEl) countEl.textContent = newCount;
                }catch(e){
                    console.error(e);
                }
            }

            document.addEventListener('click', function(e){
                const btn = e.target.closest('[data-like-btn]');
                if(!btn) return;

                // Block when not authenticated
                if (@(Model.IsAuthenticated.ToString().ToLower()) === false) {
                    window.location.href = '/Account/Login';
                    return;
                }

                e.preventDefault();
                toggleLike(btn);
            }, true);
        })();
    </script>
}
